// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:djafnwjgnrwjg@185.253.219.240:5015/convify?schema=public"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  Post     Post[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  flows Flow[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Flow {
  id                String   @id @default(cuid())
  name              String
  templateId        String?
  flowSettings      Json
  isDeleted         Boolean  @default(false)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  previewImage      String?
  link              String?
  status            String
  numberOfSteps     Int
  numberOfResponses Int
  userId            String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  responses   Response[]
  visits      Visit[]
  flowSteps   FlowStep[]
  Integration Integration?

  @@map(name: "flows")
}

model Integration {
  id                   String   @id @default(cuid())
  flowId               String   @unique
  googleAnalyticsId    String?
  googleTagManagerId   String?
  metaPixelId          String?
  metaPixelAccessToken String?
  isDeleted            Boolean  @default(false)
  createdAt            DateTime @default(now()) @map(name: "created_at")
  updatedAt            DateTime @default(now()) @map(name: "updated_at")

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map(name: "integrations")
}

model Response {
  id         String   @id @default(cuid())
  flowId     String
  content    Json
  ip         String
  userAgent  String
  isFinished Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map(name: "responses")
}

model Visit {
  id        String   @id @default(cuid())
  flowId    String
  stepId    String
  ip        String
  userAgent String
  createdAt DateTime @default(now()) @map(name: "created_at")

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map(name: "visits")
}

model Template {
  id               String   @id @default(cuid())
  name             String
  templateSettings Json
  tags             Json
  isActive         Boolean  @default(true)
  preview          String?
  createdAt        DateTime @default(now()) @map(name: "created_at")
  updatedAt        DateTime @default(now()) @map(name: "updated_at")

  templateSteps TemplateStep[]

  @@map(name: "templates")
}

model TemplateStep {
  id         String @id @default(cuid())
  templateId String
  name       String
  link       String
  content    Json
  order      Int

  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map(name: "templateSteps")
}

model FlowStep {
  id        String   @id @default(cuid())
  flowId    String
  name      String
  link      String
  content   Json
  order     Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map(name: "flowSteps")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:djafnwjgnrwjg@185.253.219.240:5028/convify?schema=public"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_userId_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_userId_fkey")
  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @map("updated_at")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  passwordHash           String?
  accounts               Account[]
  flows                  Flow[]
  sessions               Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Flow {
  id                  String              @id @default(cuid())
  name                String
  publishedName       String?
  isDeleted           Boolean             @default(false)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @default(now()) @map("updated_at")
  thumbnail_updatedAt DateTime?
  previewImage        String?
  link                String?
  status              String?
  numberOfSteps       Int?
  numberOfResponses   Int?
  userId              String
  templateId          String?
  headerData          Json?
  footerData          Json?
  flowSettings        Json?
  customDomain        String              @default("") @db.VarChar(50)
  isPublished         Boolean?            @default(false)
  flow                FlowStep[]
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  integrations        Integration?
  responses           Response[]
  visits              Visit[]
  PublishedFlowStep   PublishedFlowStep[]

  @@index([userId], map: "flows_userId_fkey")
  @@map("flows")
}

model Integration {
  id                   String   @id @default(cuid())
  flowId               String   @unique
  googleAnalyticsId    String?
  googleTagManagerId   String?
  metaPixelId          String?
  metaPixelAccessToken String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @default(now()) @map("updated_at")
  isDeleted            Boolean  @default(false)
  email                String?
  flow                 Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model Response {
  id        String   @id @default(cuid())
  flowId    String
  ip        String
  userAgent String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  content   Json
  flow      Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId], map: "responses_flowId_fkey")
  @@map("responses")
}

model Visit {
  id          String   @id @default(cuid())
  flowId      String
  stepId      String
  ip          String
  userAgent   String
  createdAt   DateTime @default(now()) @map("created_at")
  device_type Int      @default(0) @db.TinyInt
  flow        Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId], map: "visits_flowId_fkey")
  @@map("visits")
}

model Template {
  id               String         @id @default(cuid())
  name             String
  templateSettings Json
  tags             Json
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @map("updated_at")
  language         String         @default("pt") @db.Char(2)
  preview          String?
  content          Json
  isPopular        Boolean?       @default(false)
  template         TemplateStep[]

  @@map("templates")
}

model TemplateStep {
  id         String   @id @default(cuid())
  templateId String
  name       String
  link       String?
  content    Json
  order      Int
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId], map: "templateSteps_templateId_fkey")
  @@map("templateSteps")
}

model FlowStep {
  id         String   @id @default(cuid())
  flowId     String
  name       String
  link       String
  content    Json
  order      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  isDeleted  Boolean  @default(false)
  templateId String?  @db.VarChar(45)
  flow       Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId], map: "flowSteps_flowId_fkey")
  @@map("flowSteps")
}

model PublishedFlowStep {
  id         String   @id @default(cuid())
  flowId     String
  name       String
  link       String
  content    Json
  order      Int
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  isDeleted  Boolean  @default(false)
  templateId String?  @db.VarChar(45)
  flow       Flow     @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@index([flowId], map: "publishedFlowSteps_flowId_fkey")
  @@map("publishedFlowSteps")
}

model name_searches {
  id              Int     @id @default(autoincrement())
  word            String? @db.VarChar(100)
  number_searches Float?  @db.Float
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model names {
  name String? @db.VarChar(50)

  @@ignore
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  authorId  String

  @@index([authorId], map: "posts_authorId_fkey")
  @@map("posts")
}
